var N=Object.defineProperty;var s=(g,x)=>N(g,"name",{value:x,configurable:!0});import{Q as U}from"./stories.settings-7ac24d87.js";import{r as i,R as Y}from"./index-d23035ce.js";import{a as z}from"./TextField-6491f12f.js";import"./TextArea-03c4b4ec.js";import"./DefinitionList-850b66f5.js";import{F as M}from"./FunctionalList-c76f1ac4.js";import{j as m}from"./jsx-runtime-bb315772.js";import{L as V}from"./ListItem-9485ba2b.js";import"./Icon-859096df.js";import"./Avatar-4201f388.js";import"./Checkbox-154d15d8.js";import{F as J}from"./Flyout-63e5793c.js";import"./es.object.get-own-property-descriptor-89e834e9.js";import"./dom.utils-bd8c7a66.js";import"./layout.settings-9902fce9.js";import"./input.renders-0ca7929f.js";import"./settings-2cad0569.js";import"./log.utils-f56af116.js";import"./index-8eee599f.js";function E({id:g,label:x,items:n,name:d,multiple:a,inputValue:y,value:o,onInputChange:I,onChange:h,noResultsText:L,qa:D,description:O,state:P}){const[_,f]=i.exports.useState(!1),[c,j]=i.exports.useState(n),[W,q]=i.exports.useState(y||""),[B,w]=i.exports.useState(!a&&o||""),[l,T]=i.exports.useState(-1),[b,k]=i.exports.useState(a&&o||[]),u=y||y===""?y:W,A=o||o===""?o:B,v=Y.useRef(null);i.exports.useEffect(()=>{o&&!a&&C(o,!0),o&&a&&k(o)},[o]),i.exports.useEffect(()=>{j((n||[]).filter(e=>{var t;return u?(t=e.label)==null?void 0:t.toLowerCase().includes(u.toLowerCase()):!0}))},[u,n]),i.exports.useEffect(()=>{if(v.current){const t=v.current.querySelector(`.a-list__item:nth-child(${l+1})`);t==null||t.scrollIntoView({block:"nearest",inline:"nearest"})}},[l]);const G=s(e=>{f(e)},"handleStateChange"),S=s(()=>{f(!1),T(-1)},"closeFlyout"),R=s(e=>{q(e),f(!0),A&&!e&&(w(""),!a&&h&&h("",d)),I&&I(e,d)},"handleInput"),C=s((e,t=!1)=>{if(!a&&o!==""&&(!o||o===e)){const r=n==null?void 0:n.find(p=>p.value===e);R((r==null?void 0:r.label)||""),w((r==null?void 0:r.value)||""),S()}!t&&h&&h(e,d)},"selectValue"),F=s(e=>{const t=n==null?void 0:n.find(p=>p.value===e);t&&w(t.value);const r=b.includes(e)?b.filter(p=>p!==e):[...b,e].filter(p=>p!=="");k(r),h&&h(r,d)},"selectMultiple"),H=s(()=>{const e=n==null?void 0:n.find(t=>t.value===A);e&&(u!=null&&u.length)&&e.label!==u&&R(e.label),S()},"setValueBack"),K=s(()=>{const e=c&&c[l];e&&(a?F(e.value):C(e.value))},"onEnter"),Q=s(e=>{const t=(c==null?void 0:c.length)||0;switch(e.key){case"ArrowDown":return T(l===-1?0:(l+1)%t),f(!0);case"ArrowUp":return T(l===-1||l-1<0?t-1:l-1),f(!0);case"Enter":return K();case"Escape":return S()}},"handleKeyDown"),$=s(e=>a?b.includes(e):e===A,"isValueActive");return m(J,{scrollable:!0,hasPadding:!1,qa:D,trigger:m(z,{id:g,name:d,label:x,onBlur:H,value:u,onChange:e=>R(e.target.value),role:"combobox","aria-autocomplete":"list","aria-haspopup":"true","aria-expanded":_,onKeyDown:Q,description:O,state:P}),ref:v,open:_,onStateChange:G,children:c&&c.length?m(M,{lined:!0,onItemClick:e=>{a?F(e):C(e)},children:c.map((e,t)=>m(V,{id:e.value,tabIndex:-1,highlighted:t===l,onMouseDown:r=>r.preventDefault(),active:$(e.value),name:e.value,link:{href:""},children:e.label},e.value))}):m(M,{lined:!0,children:m(V,{id:"aui-autocomplete-no-results",children:m("small",{children:L})})})})}s(E,"Autocomplete");E.defaultProps={id:"aui-autocomplete",noResultsText:"Geen resultaten"};const ge={title:"React/Molecules/Autocomplete",component:E,parameters:{docs:{description:{component:"The `Autocomplete` component is a normal text input enhanced by a pannel of filtered suggestions."}}},args:{name:"aui-autocomplete",items:[{label:"Acadia",value:"1"},{label:"American Samoa",value:"2"},{label:"Arches",value:"3"},{label:"Canyonlands",value:"4"},{label:"Capitol Reef",value:"5"}],label:"National Parks",noResultsText:"Sorry, niet gevonden",multiple:!1},argTypes:{name:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `name` prop; is set on the `input` HTML element of the `Autocomplete` component. It is also returned by `onChange` and `onInputChange` to identify the component."},items:{control:{type:"array"},table:{type:{summary:"array"},defaultValue:{summary:"[]"}},description:'The `items` prop control the results from the dropdown in the `Autocomplete` component. These `items` are objects in the format of `{ label: "", value: "" }`.'},label:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The label of the `Autocomplete` component."},noResultsText:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"Geen resultaten"}},description:"The text when no item match the provided search term."},multiple:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `multiple` (if set to `true`) prop will allow the user to select multiple values. The representation of those values is free to chose (e.g. use `Tag` components)"},inputValue:{table:{type:{summary:"string"}},description:"The `inputValue` prop controls the value of the `Autocomplete` input field. This prop makes the `Autocomplete` a controlled component and should be used together with `onInputChange`."},value:{table:{type:{summary:"string | string[]"}},description:"The `value` prop controls the value of the selected `Autocomplete` item. This prop makes the `Autocomplete` a controlled component and should be used together with `onChange`. When `multiple` is `true` the value should be an array of strings."},id:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"aui-autocomplete"}},description:"The `id` prop; set on the `input` HTML element of the `Autocomplete` component."},description:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `description` prop adds a description or hint text between the label and the inputfield of the `Autocomplete`component"},state:{control:{type:"select"},options:["","error","success"],table:{type:{summary:"select"}},description:"When the `Autocomplete` is associated with a success or error state, the border of the inputfield as well as the description above will match to that thematic colour together with an identifiable icon."},onChange:{control:{type:"function"},table:{type:{summary:" function"}},action:"onChange",description:"Function triggered when selecting an option from the `Autocomplete` dropdown. The first parameter of this function is the selected value, the second parameter is the `name` of the `Autocomplete` component. When the `multiple` prop is set to `true`, the value is an array."},onInputChange:{control:{type:"function"},table:{type:{summary:" function"}},action:"onInputChange",description:"Function triggered when the input field value changes. The first parameter of this function is the input, the second parameter is the given component name."},qa:U}},xe="",we=["autocomplete"];export{we as __namedExportsOrder,xe as autocomplete,ge as default};
//# sourceMappingURL=Autocomplete.stories-39fcf31b.js.map
