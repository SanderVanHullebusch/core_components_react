var U=Object.defineProperty;var a=(g,x)=>U(g,"name",{value:x,configurable:!0});import{Q as Y}from"./stories.settings-7ac24d87.js";import{r as i,R as z}from"./index-d23035ce.js";import{a as J}from"./TextField-1ce87e9f.js";import"./TextArea-03c4b4ec.js";import"./DefinitionList-850b66f5.js";import{F as V}from"./FunctionalList-c76f1ac4.js";import{j as m}from"./jsx-runtime-bb315772.js";import{L as E}from"./ListItem-9485ba2b.js";import"./Icon-859096df.js";import"./Avatar-4201f388.js";import"./Checkbox-154d15d8.js";import{F as X}from"./Flyout-63e5793c.js";import"./es.object.get-own-property-descriptor-89e834e9.js";import"./dom.utils-bd8c7a66.js";import"./layout.settings-9902fce9.js";import"./input.renders-0ca7929f.js";import"./Spinner-74f1217c.js";import"./settings-2cad0569.js";import"./log.utils-f56af116.js";import"./index-8eee599f.js";function L({id:g,label:x,items:n,name:h,multiple:s,inputValue:y,value:o,onInputChange:_,onChange:d,noResultsText:j,qa:D,description:O,state:P,addon:w}){const[k,f]=i.exports.useState(!1),[c,W]=i.exports.useState(n),[q,B]=i.exports.useState(y||""),[G,A]=i.exports.useState(!s&&o||""),[l,T]=i.exports.useState(-1),[b,F]=i.exports.useState(s&&o||[]),p=y||y===""?y:q,v=o||o===""?o:G,S=z.useRef(null);i.exports.useEffect(()=>{o&&!s&&I(o,!0),o&&s&&F(o)},[o]),i.exports.useEffect(()=>{W((n||[]).filter(e=>{var t;return p?(t=e.label)==null?void 0:t.toLowerCase().includes(p.toLowerCase()):!0}))},[p,n]),i.exports.useEffect(()=>{if(S.current){const t=S.current.querySelector(`.a-list__item:nth-child(${l+1})`);t==null||t.scrollIntoView({block:"nearest",inline:"nearest"})}},[l]);const H=a(e=>{f(e)},"handleStateChange"),R=a(()=>{f(!1),T(-1)},"closeFlyout"),C=a(e=>{B(e),f(!0),v&&!e&&(A(""),!s&&d&&d("",h)),_&&_(e,h)},"handleInput"),I=a((e,t=!1)=>{if(!s&&o!==""&&(!o||o===e)){const r=n==null?void 0:n.find(u=>u.value===e);C((r==null?void 0:r.label)||""),A((r==null?void 0:r.value)||""),R()}!t&&d&&d(e,h)},"selectValue"),M=a(e=>{const t=n==null?void 0:n.find(u=>u.value===e);t&&A(t.value);const r=b.includes(e)?b.filter(u=>u!==e):[...b,e].filter(u=>u!=="");F(r),d&&d(r,h)},"selectMultiple"),K=a(()=>{const e=n==null?void 0:n.find(t=>t.value===v);e&&(p!=null&&p.length)&&e.label!==p&&C(e.label),R()},"setValueBack"),N=a(()=>{const e=c&&c[l];e&&(s?M(e.value):I(e.value))},"onEnter"),Q=a(e=>{const t=(c==null?void 0:c.length)||0;switch(e.key){case"ArrowDown":return T(l===-1?0:(l+1)%t),f(!0);case"ArrowUp":return T(l===-1||l-1<0?t-1:l-1),f(!0);case"Enter":return N();case"Escape":return R()}},"handleKeyDown"),$=a(e=>s?b.includes(e):e===v,"isValueActive");return m(X,{scrollable:!0,hasPadding:!1,qa:D,trigger:m(J,{id:g,name:h,label:x,onBlur:K,value:p,onChange:e=>C(e.target.value),role:"combobox","aria-autocomplete":"list","aria-haspopup":"true","aria-expanded":k,onKeyDown:Q,description:O,state:P,addon:w?{...w,content:w.content}:void 0}),ref:S,open:k,onStateChange:H,children:c&&c.length?m(V,{lined:!0,onItemClick:e=>{s?M(e):I(e)},children:c.map((e,t)=>m(E,{id:e.value,tabIndex:-1,highlighted:t===l,onMouseDown:r=>r.preventDefault(),active:$(e.value),name:e.value,link:{href:""},children:e.label},e.value))}):m(V,{lined:!0,children:m(E,{id:"aui-autocomplete-no-results",children:m("small",{children:j})})})})}a(L,"Autocomplete");L.defaultProps={id:"aui-autocomplete",noResultsText:"Geen resultaten"};const we={title:"React/Molecules/Autocomplete",component:L,parameters:{docs:{description:{component:"The `Autocomplete` component is a normal text input enhanced by a pannel of filtered suggestions."}}},args:{name:"aui-autocomplete",items:[{label:"Acadia",value:"1"},{label:"American Samoa",value:"2"},{label:"Arches",value:"3"},{label:"Canyonlands",value:"4"},{label:"Capitol Reef",value:"5"}],label:"National Parks",noResultsText:"Sorry, niet gevonden",multiple:!1,addon:{type:"icon",placement:"left",iconName:"a11y"}},argTypes:{name:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `name` prop; is set on the `input` HTML element of the `Autocomplete` component. It is also returned by `onChange` and `onInputChange` to identify the component."},items:{control:{type:"array"},table:{type:{summary:"array"},defaultValue:{summary:"[]"}},description:'The `items` prop control the results from the dropdown in the `Autocomplete` component. These `items` are objects in the format of `{ label: "", value: "" }`.'},label:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The label of the `Autocomplete` component."},noResultsText:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"Geen resultaten"}},description:"The text when no item match the provided search term."},multiple:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `multiple` (if set to `true`) prop will allow the user to select multiple values. The representation of those values is free to chose (e.g. use `Tag` components)"},inputValue:{table:{type:{summary:"string"}},description:"The `inputValue` prop controls the value of the `Autocomplete` input field. This prop makes the `Autocomplete` a controlled component and should be used together with `onInputChange`."},value:{table:{type:{summary:"string | string[]"}},description:"The `value` prop controls the value of the selected `Autocomplete` item. This prop makes the `Autocomplete` a controlled component and should be used together with `onChange`. When `multiple` is `true` the value should be an array of strings."},id:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"aui-autocomplete"}},description:"The `id` prop; set on the `input` HTML element of the `Autocomplete` component."},description:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `description` prop adds a description or hint text between the label and the inputfield of the `Autocomplete`component"},state:{control:{type:"select"},options:["","error","success"],table:{type:{summary:"select"}},description:"When the `Autocomplete` is associated with a success or error state, the border of the inputfield as well as the description above will match to that thematic colour together with an identifiable icon."},addon:{control:{type:"object"},table:{type:{summary:"object"}},description:"Set this prop to add a leading or trailing add-on (icon or spinner) inside the input field of the `Autocomplete` component. Addons have the following properties: `type`, `content` and `placement`, where `type` is either `icon`, `text` or `spinner`, `content` is either an icon name or a textual pre- or suffix and `placement` is either `left` or `right`."},onChange:{control:{type:"function"},table:{type:{summary:" function"}},action:"onChange",description:"Function triggered when selecting an option from the `Autocomplete` dropdown. The first parameter of this function is the selected value, the second parameter is the `name` of the `Autocomplete` component. When the `multiple` prop is set to `true`, the value is an array."},onInputChange:{control:{type:"function"},table:{type:{summary:" function"}},action:"onInputChange",description:"Function triggered when the input field value changes. The first parameter of this function is the input, the second parameter is the given component name."},qa:Y}},Ae="",Te=["autocomplete"];export{Te as __namedExportsOrder,Ae as autocomplete,we as default};
//# sourceMappingURL=Autocomplete.stories-831c3e9f.js.map
