import{j as t,Q as N,a as _}from"./stories.settings-7040e2b8.js";import{R as S,r as L}from"./index-61bf1805.js";import{c as y}from"./dom.utils-26b7419a.js";import{a as R,D as k}from"./layout.settings-581780cb.js";import"./_commonjsHelpers-de833af9.js";function I({qa:c,size:n,pages:a,activePage:o,onPageChange:b}){const[s,m]=S.useState(0),C=e=>m(e),A=e=>()=>b&&b(e),x=e=>{var p;const d=e.key==="ArrowLeft",i=e.key==="ArrowRight";if(d||i){(p=document.getElementById(o))==null||p.setAttribute("tabindex","-1");let l=s;i&&(l=s+1>=a.length?0:s+1,m(l)),d&&(l=s-1<0?a.length-1:s-1,m(l));const h=a[l].id;if(h){const r=document.getElementById(h);r==null||r.setAttribute("tabindex","0"),a.filter(u=>u.id!==h).forEach(u=>{var f;(f=document.getElementById(u.id))==null||f.setAttribute("tabindex","-1")}),r==null||r.focus()}}},E=y({"a-page-indicator":!0,[`a-page-indicator--${R[n||k]}`]:!!n});return t("div",{className:E,"data-qa":c,onKeyDown:x,role:"tablist",children:a==null?void 0:a.map((e,d)=>{const i=!!o&&o===e.id,p=y({"a-page-indicator__item":!0,"is-active":i});return t("button",{id:e.id,role:"tab",className:p,"aria-label":e.ariaLabel,"aria-selected":i?"true":"false","aria-controls":e.ariaControls,tabIndex:i?0:-1,onClick:A(e.id),onFocus:()=>C(d)},e.id)})})}const V={title:"React/Molecules/PageIndicator",component:I,parameters:{docs:{description:{component:"A page indicator is used to inform the users on which panel or page in a set they are currently viewing. It displays the total number of panels, as well as which panel is currently active, or in view."}}},args:{activePage:"page-1",pages:[{id:"page-1",ariaControls:"panel-1",ariaLabel:"Page 1"},{id:"page-2",ariaControls:"panel-2",ariaLabel:"Page 2"},{id:"page-3",ariaControls:"panel-3",ariaLabel:"Page 3"}],size:""},argTypes:{activePage:{control:{type:null},table:{type:{summary:"text"},defaultValue:{summary:"page-1"}},description:"ID of the current active page. Must be one of IDs of pages provided via `pages` prop. Makes the component controlled, use `onPageChange` to listen for changes."},pages:{control:{type:"object"},table:{type:{summary:"array"},defaultValue:{summary:"[]"}},description:"Allows to define pages displayed with the component."},size:{control:{type:"select"},table:{type:{summary:"string"},defaultValue:{summary:""}},options:["","large","small"],description:"Size of the component."},onPageChange:{control:{type:"function"},action:"onPageChange",table:{type:{summary:"function"}},description:"Allows to control which page is activated. First parameter of the function is the new page."},qa:N}},D=c=>{const[n,a]=L.useState("page-1");return _("div",{role:"tablist",children:[t("div",{id:"panel-1",className:"u-margin-bottom",role:"tabpanel","aria-labelledby":"page-1",hidden:n!=="page-1",children:t("p",{children:"Content for the first panel (switch page to change content)"})}),t("div",{id:"panel-2",className:"u-margin-bottom",role:"tabpanel","aria-labelledby":"page-2",hidden:n!=="page-2",children:t("p",{children:"Content for the second panel (switch page to change content)"})}),t("div",{id:"panel-3",className:"u-margin-bottom",role:"tabpanel","aria-labelledby":"page-3",hidden:n!=="page-3",children:t("p",{children:"Content for the third panel (switch page to change content)"})}),t(I,{...c,activePage:n,onPageChange:o=>{c.onPageChange(o),a(o)}})]})},g=D.bind({});var v,P,w;g.parameters={...g.parameters,docs:{...(v=g.parameters)==null?void 0:v.docs,source:{originalSource:`args => {
  const [activePage, setActivePage] = useState('page-1');
  return <div role="tablist">
      <div id="panel-1" className="u-margin-bottom" role="tabpanel" aria-labelledby="page-1" hidden={activePage !== 'page-1'}>
        <p>Content for the first panel (switch page to change content)</p>
      </div>
      <div id="panel-2" className="u-margin-bottom" role="tabpanel" aria-labelledby="page-2" hidden={activePage !== 'page-2'}>
        <p>Content for the second panel (switch page to change content)</p>
      </div>
      <div id="panel-3" className="u-margin-bottom" role="tabpanel" aria-labelledby="page-3" hidden={activePage !== 'page-3'}>
        <p>Content for the third panel (switch page to change content)</p>
      </div>
      <PageIndicator {...args} activePage={activePage} onPageChange={p => {
      args.onPageChange(p);
      setActivePage(p);
    }} />
    </div>;
}`,...(w=(P=g.parameters)==null?void 0:P.docs)==null?void 0:w.source}}};const q=["pageIndicator"];export{q as __namedExportsOrder,V as default,g as pageIndicator};
//# sourceMappingURL=PageIndicator.stories-2a4c8657.js.map
